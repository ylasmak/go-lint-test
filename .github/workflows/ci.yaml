name: code integration
on:
  push:
    branches:
      - master
      - main
  pull_request:

permissions:
  contents: read
  # Optional: allow read access to pull request. Use with `only-new-issues` option.
  # pull-requests: read

jobs:
  unitTestExecutionAndTestcoverage:
    name: Unit test execution and test coverage
    runs-on: ubuntu-latest
    outputs:
      jobResultFileName: ${{ steps.dipalayTestResult.outputs.unitTestResultFile }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: '1.21.3'
          check-latest: true
          cache: false
      - name: install go dependecies
        run: | 
              go get .
              go mod tidy
      - name: generate test coverage
        run: | 
              go test -v ./... -coverprofile=./cover.out > test.result
      - name: check test coverage
        uses: ylasmak/go-coverage-test@main
        with:
          # Configure action using config file (option 1)
          profile: cover.out
          threshold-file: 80
          threshold-package: 80
          threshold-total: 95
      - name: display test result
        id: dipalayTestResult
        if: always()
        run: |
            cat test.result > unitTestExecutionAndTestcoverage.result
            cat code_coverage.result >> unitTestExecutionAndTestcoverage.result
            cat unitTestExecutionAndTestcoverage.result
            echo 'unitTestResultFile = unitTestExecutionAndTestcoverage.result' >> "$GITHUB-OUTPUT"
  codeVulnerabiltyScan:
    runs-on: ubuntu-latest
    outputs:
      jobResultFileName: ${{ steps.displaySecurityScanResult.outputs.securityScanResult }}
    env:
      GO111MODULE: on
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: '1.21.3'
      - name: Run install prerequiste
        run: |
            go get .
            go mod tidy
      - name: Install govulncheck
        run: |
            go install github.com/securego/gosec/v2/cmd/gosec@latest
            go install golang.org/x/vuln/cmd/govulncheck@latest
      - name: Run govulncheck
        run: |
            govulncheck ./... > securityScanResult.result
            gosec ./...      >> securityScanResult.result
      - name: Display security test result
        if: always()
        id: displaySecurityScanResult
        run: |
            echo 'securityScanResult = securityScanResult.result' >> "$GITHUB-OUTPUT"
            cat  securityScanResult.result
      - name: Upload Test result as artifact
        if:   steps.displaySecurityScanResult.outcome  == 'success'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.displaySecurityScanResult.outputs.securityScanResult }}
          path: ${{ steps.displaySecurityScanResult.outputs.securityScanResult }}
  codeQualityScan:
    name: Code Linting scan
    runs-on: ubuntu-latest
    outputs:
      jobResultFileName: ${{ steps.displayCodeQualityScanResult.outputs.securityScanResult }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: '1.21.3'
          check-latest: true
          cache: false
      - name: install golangci-lint
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.55.0
      - name: run golangci-lint
        run: golangci-lint run ./...  > golangci-lint.result
      - name: Display lint result
        if: always() 
        id: displayCodeQualityScanResult
        run: |
            echo 'unitTestResultFile = codeQualityScan.result' >> "$GITHUB-OUTPUT"
            cat golangci-lint.result
